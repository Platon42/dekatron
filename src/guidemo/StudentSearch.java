/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guidemo;

import guidemo.parser.OperationJDBC;
import static java.awt.EventQueue.invokeLater;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import static java.util.logging.Logger.getLogger;
import static javax.swing.UIManager.getInstalledLookAndFeels;
import static javax.swing.UIManager.setLookAndFeel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author John
 */
public class StudentSearch extends javax.swing.JFrame {

    /**
     * Creates new form StudentSearch
     */
    public StudentSearch() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        studentResult = new javax.swing.JTable();
        studentInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Поиск по студентам");
        setAlwaysOnTop(true);
        setName("studentsearch"); // NOI18N

        studentResult.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        studentResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Номер", "ФИО", "Группа"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentResult.setColumnSelectionAllowed(true);
        studentResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentResultMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(studentResult);
        studentResult.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        studentInput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        studentInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        studentInput.setName("studentInput"); // NOI18N
        studentInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                studentInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                studentInputFocusLost(evt);
            }
        });
        studentInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentInputActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Введите фамилию: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(10, 10, 10)
                        .addComponent(studentInput)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        studentInput.getAccessibleContext().setAccessibleName("");

        getAccessibleContext().setAccessibleDescription("");
        getAccessibleContext().setAccessibleParent(this);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void studentInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentInputActionPerformed

        DefaultTableModel a = (DefaultTableModel) studentResult.getModel();
        
        int cnt = a.getRowCount();
        for (int i = 0; i < cnt-1; i++) {
            //a.removeRow(i);
        }
        
        ArrayList<Object[]> res = null;//findStudent(evt.getActionCommand());
        try {
            res = OperationJDBC.selectStudentFromLastname(evt.getActionCommand());
        } catch (SQLException ex) {
            Logger.getLogger(StudentSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Object[] objects : res) {
            System.out.println(((Integer)objects[0]) + " " + ((String)objects[1]));
            a.addRow(objects);
        }
        System.out.println(" = ");
        studentResult.setModel(a);

    }//GEN-LAST:event_studentInputActionPerformed

    private void studentInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_studentInputFocusGained
        if (studentInput.getText().equals("Введите фамилию студента")) {
            studentInput.setText("");
        }
    }//GEN-LAST:event_studentInputFocusGained

    private void studentInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_studentInputFocusLost
        if (studentInput.getText().isEmpty()) {
            studentInput.setText("Введите фамилию студента");
        }
    }//GEN-LAST:event_studentInputFocusLost

    private void studentResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentResultMouseClicked

        if (evt.getClickCount() == 2) {
            if (studentResult.getSelectedRow() >= 0) {
                System.out.println(studentResult.getValueAt(studentResult.getSelectedRow(), 1));
                ArrayList<Object[]> res = null;//findStudent(evt.getActionCommand());
                
                try {
                    res = OperationJDBC.selectStudentFromNom((int)(studentResult.getValueAt(studentResult.getSelectedRow(), 0)));
                } catch (SQLException ex) {
                    Logger.getLogger(StudentSearch.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                for (Object[] objects : res) {
                   // res.add(objects);
            //    }
                //System.out.println(((String)objects[0]) + " " + ((String)objects[1]));
                StudentView SV = new StudentView();
                SV.setLabel(studentResult.getValueAt(studentResult.getSelectedRow(), 1).toString(),((String)objects[0]), ((String)objects[1]), ((String)objects[2]));   
                SV.setVisible(true);
                
                }
            }
        }
    }//GEN-LAST:event_studentResultMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            getLogger(StudentSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        invokeLater(new Runnable() {
            public void run() {
                new StudentSearch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField studentInput;
    private javax.swing.JTable studentResult;
    // End of variables declaration//GEN-END:variables
}
